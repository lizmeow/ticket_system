Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      "AttributeDefinitions":
        - "AttributeName": "userId"
          "AttributeType": "S"
      "KeySchema":
        - "AttributeName": "userId"
          "KeyType": "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: "Users"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require('./cfn-response');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
            console.log(JSON.stringify(event,null,2));
            var params = {
              RequestItems: {
                "Users": [
                  {
                    PutRequest: {
                      Item: {
                        userId: "1",
                        name: "Swastik"
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        userId: "2",
                        name: "Tom"
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        userId: "3",
                        name: "Steve"
                      }
                    }
                  }
                ]
              }
            };
            docClient.batchWrite(params, function(err, data) {
              if (err) {
                response.send(event, context, "FAILED", {});
              } else {
                response.send(event, context, "SUCCESS", {});
              }
            });
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs16.x
      Timeout: 60
  InitializeEventsTable:
    Type: Custom::InitFunction
    DependsOn: UsersTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: UsersTable